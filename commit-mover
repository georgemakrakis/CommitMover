#!/bin/bash

set -e

is_valid() {
    case $1 in
      ( *[!0-9A-Fa-f]* | "" ) echo "1" ;;
      ( * )                
        case ${#1} in
          ( 40 ) echo "0" ;;
          ( * )  echo "1" ;;
        esac
    esac    
}

if ! [ $# -eq 4 ]; then
    echo "Four arguments must be provided"
    exit 1
fi
if ! [ -d "$1" ]; then
    echo "Parameter 1 is not a directory"
    exit 1
fi
if ! [ -d "$2" ]; then
    echo "Parameter 2 is not a directory"
    exit 1
fi

# is_valid $3

VALID3=$(is_valid $3)
VALID4=$(is_valid $4)
# echo $VALID

if [ $VALID3 -eq 1 ]; then
    echo "Parameter 3 is not valid sha-1"
    exit 1
fi

if [ $VALID4 -eq 1 ]; then
    echo "Parameter 4 is not valid sha-1"
    exit 1
fi

OLD=$1
NEW=$2

FROM=$3
TO=$4

# TESTING VARIABLES
#TO=05e74c0ccfc4754734568e9960dad16150060a04
#FROM=7962dcb4c6b420af7b2130fbadb5137312f655da

cd $OLD

pwd

mapfile -t sha1 < <(git rev-list HEAD)

#The indices are aquired in reverse order
for i in "${!sha1[@]}"; do
   if [[ "${sha1[$i]}" = "$FROM" ]]; then
       TO_INDEX=$i;
   fi
   if [[ "${sha1[$i]}" = "$TO" ]]; then
      FROM_INDEX=$i;
   fi

done

for (( i=FROM_INDEX;i<=TO_INDEX;i++)) ; do
    git format-patch "${sha1[$i]}"~.."${sha1[$i]}";
done
    #if [ $sha1 = $FROM ] then
#	git format-patch $sha1~..$sha1
    #fi

    #if [ $sha1 = $TO ] then
#	git format-patch $sha1~..$sha1
#	break
#    fi


cd $NEW

pwd

#git am --signoff < <("$OLD"/*.patch)
patches="$OLD"/*.patch

for i in $patches; do
    #echo "$i"
    git am "$i"
done
